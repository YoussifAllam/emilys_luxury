name: Django CI #  This defines the name of the workflow as "Django CI".

# Trigger the workflow when pushing to the repo or creating a pull request
on:
  push: # he workflow will trigger when code is pushed to the main branch.
    branches:
      - main
  pull_request: # The workflow will also trigger when a pull request is created or updated targeting the main branch.
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest # Specifies the environment in which the job will run, in this case, the latest version of Ubuntu.

    services:
      postgres:
        image: postgres:12 # The Docker image to use (Postgres version 12).
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >- # This maps the PostgreSQL port from the container (5432) to the same port on the host.
          --health-cmd="pg_isready -U postgres" #* Command to check if Postgres is ready.
          --health-interval=10s #* How often to perform the health check (every 10 seconds).
          --health-timeout=5s #* Maximum time to wait for the health check (5 seconds).
          --health-retries=5  #* Number of consecutive failures required to consider the service unhealthy (5 retries).
        volumes: 
          - /var/lib/postgresql/data # This specifies a volume for data persistence, ensuring that data in Postgres is not lost when the container stops.

    steps: # This section lists the steps to be executed in the job
      # Step 1: Checkout the repo
      - name: Checkout code
        uses: actions/checkout@v2 # This indicates the action being used; in this case, it checks out the code from the repository.

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9' # You can adjust the version as needed
      
      # Adding a caching mechanism for dependencies can speed up the workflow. 
      - name: Cache Python packages
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run linter
        run: |
            pip install flake8
            flake8 .

      # Step 4: Set up the environment (e.g., for Postgres)
      - name: Set up environment
        run: |
          python manage.py migrate --skip-checks #*The --skip-checks option allows migrations to run without performing checks (useful for CI).

      # Step 5: Run tests
      - name: Run tests
        run: |
          python manage.py test

      # Step 6: Run the Django server (optional)
      # This step is optional; running tests is usually sufficient
      # You can remove this if you don't need to run the development server
      - name: Run Django Development Server
        run: |
          python manage.py runserver 0.0.0.0:8000 &
        env:
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }} # Sets the environment variable DJANGO_SECRET_KEY using a secret stored in GitHub.
          # This is important for security, as it ensures sensitive information is not hard-coded in the workflow.
